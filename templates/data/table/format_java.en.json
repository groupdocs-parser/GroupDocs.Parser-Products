{
  "head": {
    "title": "Retrieve tables from {{FileFormatUp}} documents in {{ProgLang}} apps",
    "description": "Extract structured tabular data from {{FileFormatUp}} files in {{ProgLang}} applications using {{ProdShortName}}—no external tools needed."
  },
  "header": {
    "title": "Retrieve table data from {{FileFormatUp}} using {{ProgLang}}",
    "description": "Seamlessly detect and extract tables from formats like PDF, DOCX, and XLSX with {{ProdShortName}} in your {{EnvNameShort}} workflows.",
    "subtitle": "{{ProdFullName}}",
    "action_title": "Download Free Trial"
  },
  "about": {
    "title": "Introduction to {{ProdFullName}} API",
    "content": "[{{ProdShortName}}]({{PlatformLink}}) is a feature-rich content extraction API for {{EnvName}} platforms. It allows developers to accurately parse tables, text, graphics, links, and structured data from PDFs, Word documents, Excel sheets, PowerPoint presentations, and more—without requiring third-party plugins."
  },
  "formats": {
    "title": "Document types supported for table extraction",
    "description": "{{ProdShortName}} provides reliable table detection across multiple file types. Here's a list of the most widely supported document formats for extracting tables."
  },
  "examples": {
    "comment_1": "Load the input document with {{textParser}} that includes table elements",
    "comment_2": "Verify that the document type allows table recognition",
    "comment_3": "Add logic for files that don’t support tables",
    "comment_4": "Define rules for interpreting table structure",
    "comment_5": "Set parameters to extract tables",
    "comment_6": "Run table extraction on the loaded document",
    "comment_7": "Process each extracted table from the result"
  },
  "steps": {
    "title": "How to retrieve tables from {{FileformatCap}} in {{ProgLang}}",
    "content": {
      "title": "To parse tables from {{FileFormatUp}} documents using [{{ProdShortName}}]({{PlatformLink}}), follow these easy steps in your {{EnvName}} environment:",
      "step_1": "Create a {{textParser}} instance and load the target {{FileFormatUp}} file.",
      "step_2": "Verify that the file supports structured table extraction.",
      "step_3": "Use the API to retrieve table elements from the document.",
      "step_4": "Leverage the extracted data in analytics, reporting, or automation systems."
    }
  },
  "more_features": {
    "title": "Advanced content extraction tools",
    "description": "Beyond reading tables, {{ProdShortName}} supports capturing plain text, visual elements, embedded metadata, and structured objects to enhance document processing tasks.",
    "image_description": "Extracting structured content and tabular data",
    "feature_1": {
      "title": "Precise table parsing across formats",
      "content": "Support for extracting tables from standard document types like PDF, Word, Excel, and HTML with high accuracy."
    },
    "feature_2": {
      "title": "Read tabular structures from diverse sources",
      "content": "Retrieve table data from spreadsheets, documents, and reports while preserving the structure and alignment."
    },
    "feature_3": {
      "title": "Customizable table extraction settings",
      "content": "Control layout detection, manage headers and footers, and fine-tune extraction with flexible configuration options."
    },
    "code_1": {
      "title": "Sample: extract tables from an Excel document",
      "content": "This example shows how to extract and loop through table content in an Excel (XLSX) file using {{ProdShortName}}.",
      "comment_1": "Initialize {{textParser}} with the Excel file",
      "comment_2": "Exit if table extraction isn’t supported for this document",
      "comment_3": "Apply rules to locate table layout",
      "comment_4": "Configure settings for table extraction",
      "comment_5": "Invoke the extraction process",
      "comment_6": "Loop over all parsed table structures",
      "comment_7": "Iterate over each row within the table",
      "comment_8": "Process each cell in the current row",
      "comment_9": "Access and read the current cell's content",
      "comment_10": "Output the textual value of each table cell"
    }
  }
}